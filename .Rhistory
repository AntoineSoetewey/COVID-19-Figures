# aggregate new intakes by province and date
dat <- dat %>%
mutate(
DATE = as.Date(DATE),
PROVINCE2 = case_when(
PROVINCE %in% c("BrabantWallon", "VlaamsBrabant", "Brussels") ~ "Brabant",
!PROVINCE %in% c("BrabantWallon", "VlaamsBrabant", "Brussels") ~ PROVINCE
),
PROVINCE2 = case_when(
PROVINCE == "OostVlaanderen" ~ "Oost-Vlaanderen",
PROVINCE == "WestVlaanderen" ~ "West-Vlaanderen",
!PROVINCE %in% c("OostVlaanderen", "WestVlaanderen") ~ PROVINCE2
),
PROVINCE = PROVINCE2
)
dat <- aggregate(NEW_IN ~ DATE + PROVINCE, dat, sum)
# add new intakes for Belgium as a whole
belgium <- aggregate(NEW_IN ~ DATE, dat, sum) %>%
mutate(PROVINCE = "Belgium") %>%
select(DATE, PROVINCE, NEW_IN)
##
dat <- rbind(dat, belgium) %>%
mutate(
population = case_when(
PROVINCE == "Antwerpen" ~ 1857986,
PROVINCE == "Brabant" ~ 403599 + 1208542 + 1146175,
PROVINCE == "Hainaut" ~ 1344241,
PROVINCE == "Liège" ~ 1106992,
PROVINCE == "Limburg" ~ 874048,
PROVINCE == "Luxembourg" ~ 284638,
PROVINCE == "Namur" ~ 494325,
PROVINCE == "Oost-Vlaanderen" ~ 1515064,
PROVINCE == "West-Vlaanderen" ~ 1195796,
PROVINCE == "Belgium" ~ 11431406
),
NEW_IN_divid = NEW_IN / population * 100000
)
dat$PROVINCE <- relevel(as.factor(dat$PROVINCE), ref = "Belgium")
# choose period
dat <- subset(dat, DATE >= "2020-09-01")
all_models <- dat %>%
group_by(PROVINCE) %>%
nest() %>%
mutate(model = map(data, ~glm(NEW_IN_divid ~ DATE,
# offset=population,
data = .,
family = "poisson")))
all_fit <- all_models %>%
mutate(fit = map(model, augment, se_fit = TRUE),
fit = map(fit, select, -c("NEW_IN_divid","DATE"))) %>%
select(-model) %>%
unnest(cols = c("data","fit")) %>%
mutate(fit = 10^.fitted,
lcl = 10^(.fitted - .se.fit * qt(0.975, df = 10)),
ucl = 10^(.fitted + .se.fit * qt(0.975, df = 10)),
fitpc = fit,
lclpc = lcl,
uclpc = ucl)
all_models %>%
mutate(estimates = map(model, tidy)) %>%
unnest(cols = estimates) %>%  # produces 2 rows per country, (intercept) and day100
filter(term == "DATE") %>%
select(PROVINCE, estimate, std.error) %>%
knitr::kable(digits = 3)
doubling_times <- all_models %>%
mutate(estimates = map(model, tidy)) %>%
unnest(cols = estimates) %>%  # produces 2 rows per country, (intercept) and day100
filter(term == "DATE") %>%
select(PROVINCE, estimate, std.error) %>%
mutate(var_b = std.error^2,
t = log10(2) / estimate,
var_t = var_b * log10(2)^2 / estimate^4,
lcl_t = t - sqrt(var_t)*qt(0.975, 12),
ucl_t = t + sqrt(var_t)*qt(0.975, 12),
label = sprintf("%.2f [%.2f-%.2f]", t, lcl_t, ucl_t))
doubling_times %>%
select(PROVINCE, label) %>%
knitr::kable()
facet_labels <- doubling_times %>%
mutate(label = paste0(PROVINCE,"\n Doubling time: ", label, " days")) %>%
pull(label)
names(facet_labels) <- pull(doubling_times, PROVINCE)
# Create plot in english
fig_trends <- ggplot(
dat,
aes(x = DATE, y = NEW_IN_divid)
) +
geom_vline(
xintercept = as.Date("2020-09-01"), linetype = "dashed",
color = "lightgrey", size = 0.5
) +
geom_vline(
xintercept = as.Date("2020-10-01"), linetype = "dashed",
color = "lightgrey", size = 0.5
) +
annotate("rect",
ymin = -Inf, ymax = 1,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .05
) +
annotate("rect",
ymin = 1, ymax = 2,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .1
) +
annotate("rect",
ymin = 2, ymax = 3,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .15
) +
annotate("rect",
ymin = 3, ymax = Inf,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .20
) +
geom_point(
size = 1L,
colour = "steelblue"
) +
labs(x = "", y = "Number of hospitalisations (per 100,00 inhabitants)") +
theme_minimal() +
facet_wrap(~PROVINCE, dir="v", labeller = labeller(PROVINCE = facet_labels),
scales = "free",
ncol = 5) +
geom_line(data = all_fit,
mapping = aes(y = fitpc),
color = "grey",
size = 1.25) +
geom_ribbon(data = all_fit,
mapping = aes(ymin = lclpc, ymax = uclpc),
alpha = 0.2) +
# geom_line(data = all_predicted,
#           mapping = aes(y = fitpc),
#           linetype = 2) +
# geom_ribbon(data = all_predicted,
#             mapping = aes(ymin = lplpc, ymax = uplpc),
#             alpha = 0.2)  +
labs(
title = "Evolution of hospital admissions in Belgium - COVID-19"
) +
scale_y_continuous(breaks = seq(from = 0, to = max(dat$NEW_IN_divid), by = 1), limits = c(0, max(dat$NEW_IN_divid))) +
scale_x_date(labels = date_format("%d/%m")) +
theme(
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
plot.margin = unit(c(5.5, 5.5, 20, 5.5), "points")
)
fig_trends
## adjust caption at the end of the trend figure
caption <- grobTree(
textGrob("* Solid lines: curves fitted to observations",
x = 0, hjust = 0, vjust = 0,
gp = gpar(col = "darkgray", fontsize = 8, lineheight = 1.2)
),
textGrob("Niko Speybroeck (@NikoSpeybroeck), Antoine Soetewey (@statsandr) & Angel Rosas (@arosas_aguirre) \n Data: https://epistat.wiv-isp.be/covid/  ",
x = 1, hjust = 1, vjust = 0,
gp = gpar(col = "black", fontsize = 10, lineheight = 1.2)
),
cl = "ann"
)
# save plot
png(file = "Belgian_Hospitalisations_1310.png", width = 15 * 360, height = 7 * 360, units = "px", pointsize = 7, res = 300)
grid.arrange(fig_trends, bottom = caption)
dev.off()
# clean environment
remove(list = ls())
# required packages
library(ggplot2)
library(ggrepel)
library(zoo)
library(lme4)
library(dplyr)
library(scales)
library(ggpubr)
library(grid)
library(gridExtra)
library(broom)
library(tidyr)
library(purrr)
# import Sciensano hospitalisations data
dat <- read.csv("https://epistat.sciensano.be/Data/COVID19BE_HOSP.csv", fileEncoding = "UTF-8", stringsAsFactors = FALSE)
# aggregate new intakes by province and date
dat <- dat %>%
mutate(
DATE = as.Date(DATE),
PROVINCE2 = case_when(
PROVINCE %in% c("BrabantWallon", "VlaamsBrabant", "Brussels") ~ "Brabant",
!PROVINCE %in% c("BrabantWallon", "VlaamsBrabant", "Brussels") ~ PROVINCE
),
PROVINCE2 = case_when(
PROVINCE == "OostVlaanderen" ~ "Oost-Vlaanderen",
PROVINCE == "WestVlaanderen" ~ "West-Vlaanderen",
!PROVINCE %in% c("OostVlaanderen", "WestVlaanderen") ~ PROVINCE2
),
PROVINCE = PROVINCE2
)
dat <- aggregate(NEW_IN ~ DATE + PROVINCE, dat, sum)
# add new intakes for Belgium as a whole
belgium <- aggregate(NEW_IN ~ DATE, dat, sum) %>%
mutate(PROVINCE = "Belgium") %>%
select(DATE, PROVINCE, NEW_IN)
##
dat <- rbind(dat, belgium) %>%
mutate(
population = case_when(
PROVINCE == "Antwerpen" ~ 1857986,
PROVINCE == "Brabant" ~ 403599 + 1208542 + 1146175,
PROVINCE == "Hainaut" ~ 1344241,
PROVINCE == "Liège" ~ 1106992,
PROVINCE == "Limburg" ~ 874048,
PROVINCE == "Luxembourg" ~ 284638,
PROVINCE == "Namur" ~ 494325,
PROVINCE == "Oost-Vlaanderen" ~ 1515064,
PROVINCE == "West-Vlaanderen" ~ 1195796,
PROVINCE == "Belgium" ~ 11431406
),
NEW_IN_divid = NEW_IN / population * 100000
)
dat$PROVINCE <- relevel(as.factor(dat$PROVINCE), ref = "Belgium")
# choose period
dat <- subset(dat, DATE >= "2020-09-01")
all_models <- dat %>%
group_by(PROVINCE) %>%
nest() %>%
mutate(model = map(data, ~glm(NEW_IN ~ DATE,
# offset=population,
data = .,
family = "poisson")))
all_fit <- all_models %>%
mutate(fit = map(model, augment, se_fit = TRUE),
fit = map(fit, select, -c("NEW_IN","DATE"))) %>%
select(-model) %>%
unnest(cols = c("data","fit")) %>%
mutate(fit = 10^.fitted,
lcl = 10^(.fitted - .se.fit * qt(0.975, df = 10)),
ucl = 10^(.fitted + .se.fit * qt(0.975, df = 10)),
fitpc = fit,
lclpc = lcl,
uclpc = ucl)
all_models %>%
mutate(estimates = map(model, tidy)) %>%
unnest(cols = estimates) %>%  # produces 2 rows per country, (intercept) and day100
filter(term == "DATE") %>%
select(PROVINCE, estimate, std.error) %>%
knitr::kable(digits = 3)
doubling_times <- all_models %>%
mutate(estimates = map(model, tidy)) %>%
unnest(cols = estimates) %>%  # produces 2 rows per country, (intercept) and day100
filter(term == "DATE") %>%
select(PROVINCE, estimate, std.error) %>%
mutate(var_b = std.error^2,
t = log10(2) / estimate,
var_t = var_b * log10(2)^2 / estimate^4,
lcl_t = t - sqrt(var_t)*qt(0.975, 12),
ucl_t = t + sqrt(var_t)*qt(0.975, 12),
label = sprintf("%.2f [%.2f-%.2f]", t, lcl_t, ucl_t))
doubling_times %>%
select(PROVINCE, label) %>%
knitr::kable()
facet_labels <- doubling_times %>%
mutate(label = paste0(PROVINCE,"\n Doubling time: ", label, " days")) %>%
pull(label)
names(facet_labels) <- pull(doubling_times, PROVINCE)
# Create plot in english
fig_trends <- ggplot(
dat,
aes(x = DATE, y = NEW_IN_divid)
) +
geom_vline(
xintercept = as.Date("2020-09-01"), linetype = "dashed",
color = "lightgrey", size = 0.5
) +
geom_vline(
xintercept = as.Date("2020-10-01"), linetype = "dashed",
color = "lightgrey", size = 0.5
) +
annotate("rect",
ymin = -Inf, ymax = 1,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .05
) +
annotate("rect",
ymin = 1, ymax = 2,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .1
) +
annotate("rect",
ymin = 2, ymax = 3,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .15
) +
annotate("rect",
ymin = 3, ymax = Inf,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .20
) +
geom_point(
size = 1L,
colour = "steelblue"
) +
labs(x = "", y = "Number of hospitalisations (per 100,00 inhabitants)") +
theme_minimal() +
facet_wrap(~PROVINCE, dir="v", labeller = labeller(PROVINCE = facet_labels),
scales = "free",
ncol = 5) +
geom_line(data = all_fit,
mapping = aes(y = fitpc),
color = "grey",
size = 1.25) +
geom_ribbon(data = all_fit,
mapping = aes(ymin = lclpc, ymax = uclpc),
alpha = 0.2) +
# geom_line(data = all_predicted,
#           mapping = aes(y = fitpc),
#           linetype = 2) +
# geom_ribbon(data = all_predicted,
#             mapping = aes(ymin = lplpc, ymax = uplpc),
#             alpha = 0.2)  +
labs(
title = "Evolution of hospital admissions in Belgium - COVID-19"
) +
scale_y_continuous(breaks = seq(from = 0, to = max(dat$NEW_IN_divid), by = 1), limits = c(0, max(dat$NEW_IN_divid))) +
scale_x_date(labels = date_format("%d/%m")) +
theme(
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
plot.margin = unit(c(5.5, 5.5, 20, 5.5), "points")
)
fig_trends
## adjust caption at the end of the trend figure
caption <- grobTree(
textGrob("* Solid lines: curves fitted to observations",
x = 0, hjust = 0, vjust = 0,
gp = gpar(col = "darkgray", fontsize = 8, lineheight = 1.2)
),
textGrob("Niko Speybroeck (@NikoSpeybroeck), Antoine Soetewey (@statsandr) & Angel Rosas (@arosas_aguirre) \n Data: https://epistat.wiv-isp.be/covid/  ",
x = 1, hjust = 1, vjust = 0,
gp = gpar(col = "black", fontsize = 10, lineheight = 1.2)
),
cl = "ann"
)
# save plot
png(file = "Belgian_Hospitalisations_1310.png", width = 15 * 360, height = 7 * 360, units = "px", pointsize = 7, res = 300)
grid.arrange(fig_trends, bottom = caption)
dev.off()
# clean environment
remove(list = ls())
# required packages
library(ggplot2)
library(dplyr)
library(gridExtra)
library(grid)
library(RColorBrewer)
library(ggpubr)
# colors
reds <- c("white", brewer.pal(5, "Reds"))
blues <- c("white", brewer.pal(5, "Blues"))
## caption at the end of figure
caption <- grobTree(
textGrob("Niko Speybroeck (@NikoSpeybroeck), Antoine Soetewey (@statsandr) & Angel Rosas (@arosas_aguirre) \n Data: https://epistat.wiv-isp.be/covid/  ",
x = 1, hjust = 1, vjust = 0,
gp = gpar(col = "black", fontsize = 8, lineheight = 1)
),
cl = "ann"
)
# import Sciensano hospitalisations data
dat <- read.csv("https://epistat.sciensano.be/Data/COVID19BE_HOSP.csv", fileEncoding = "UTF-8", stringsAsFactors = FALSE)
# aggregate new intakes by province and date
dat <- dat %>%
mutate(
DATE = as.Date(DATE),
PROVINCE2 = case_when(
PROVINCE %in% c("BrabantWallon", "VlaamsBrabant", "Brussels") ~ "Brabant",
!PROVINCE %in% c("BrabantWallon", "VlaamsBrabant", "Brussels") ~ PROVINCE
),
PROVINCE2 = case_when(
PROVINCE == "OostVlaanderen" ~ "Oost-Vlaanderen",
PROVINCE == "WestVlaanderen" ~ "West-Vlaanderen",
!PROVINCE %in% c("OostVlaanderen", "WestVlaanderen") ~ PROVINCE2
),
PROVINCE = PROVINCE2
)
dat <- aggregate(NEW_IN ~ DATE + PROVINCE, dat, sum)
## insuring all dates for provinces
alldates <- as.data.frame(expand.grid(
seq(as.Date(min(dat$DATE)), as.Date(max(dat$DATE)), by = "days"),
levels(as.factor(dat$PROVINCE))
))
names(alldates) <- c("DATE", "PROVINCE")
dat <- merge(dat, alldates, by = c("DATE", "PROVINCE"), all = T)
# add new intakes for Belgium as a whole
belgium <- aggregate(NEW_IN ~ DATE, dat, sum) %>%
mutate(PROVINCE = "Belgium") %>%
select(DATE, PROVINCE, NEW_IN)
dat <- rbind(dat, belgium) %>%
mutate(
population = case_when(
PROVINCE == "Antwerpen" ~ 1857986,
PROVINCE == "Brabant" ~ 403599 + 1208542 + 1146175,
PROVINCE == "Hainaut" ~ 1344241,
PROVINCE == "Liège" ~ 1106992,
PROVINCE == "Limburg" ~ 874048,
PROVINCE == "Luxembourg" ~ 284638,
PROVINCE == "Namur" ~ 494325,
PROVINCE == "Oost-Vlaanderen" ~ 1515064,
PROVINCE == "West-Vlaanderen" ~ 1195796,
PROVINCE == "Belgium" ~ 11431406
),
NEW_IN_divid = NEW_IN / population * 1000000
)
##### MAPS
# preparing
cuts <- c(0, 2.5, 10.0, 20.0, 30.0, 40.0, 80.0)
cutslab <- c("[ 0.0, 2.5 ]", "] 2.5, 10.0 ]", "] 10.0, 20.0 ]", "] 20.0, 30.0 ]", "] 30.0, 40.0 ]", "> 40.0")
## FUNCTION MAPS
library(GADMTools)
library(RColorBrewer)
library(tmap)
library(sf)
gx_map <- function(first_date, second_date) {
## aggregate data by period
dat_ag <- filter(dat, PROVINCE != "Belgium") %>%
group_by(PROVINCE) %>%
summarize(
"per" = sum(NEW_IN_divid[DATE >= first_date & DATE < second_date], na.rm = T) / length(first_date:second_date)
)
## map
map <- gadm_sf_loadCountries(c("BEL"), level = 2, basefile = "./")$sf
map <- map %>%
mutate(PROVINCE = case_when(
NAME_2 %in% c("Brabant Wallon", "Vlaams Brabant", "Bruxelles") ~ "Brabant",
!NAME_2 %in% c("Brabant Wallon", "Vlaams Brabant", "Bruxelles") ~ NAME_2
)) %>%
group_by(PROVINCE) %>%
summarise(geometry = st_union(geometry)) %>%
left_join(dat_ag, by = "PROVINCE") %>%
mutate(
class = cut(per, breaks = cuts, labels = cutslab, include.lowest = TRUE)
)
## points for labels
points <- st_centroid(map)
points <- cbind(map, st_coordinates(st_centroid(map$geometry)))
points <- mutate(points,
num = paste("(", format(round(per, 1), nsmall = 1), ")")
)
# chosen second_date (for the last period)
if (second_date == max(dat$DATE)) {
second_date <- second_date
} else {
second_date <- second_date - 1
}
## period title
period <- paste0(
format(first_date, format = "%d/%m"), " - ",
format(second_date, format = "%d/%m"), "   "
)
## plotting
ggplot(map) +
geom_sf(aes(fill = class)) +
scale_fill_manual(values = reds, drop = FALSE) +
geom_text(
data = points, aes(x = X + 0.01, y = Y + 0.07, label = PROVINCE), col = "black", size = 2, nudge_x = -0.07,
check_overlap = TRUE
) +
geom_text(
data = points, aes(x = X, y = Y - 0.02, label = num), col = "black", size = 2.5, nudge_x = -0.07,
check_overlap = TRUE
) +
labs(title = bquote(bold(.(period))), fill = "Daily hospitalizations \n (x1,000,000 inh.)") +
theme_void() +
theme(
title = element_text(size = 10, color = "black"),
plot.title = element_text(hjust = 0.5),
# Change legend
legend.position = "none",
legend.key.size = unit(0.9, "line"),
legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.text = element_text(color = "black", size = 11),
plot.margin = unit(c(+0.1, 0, +0.2, 0), "cm")
)
}
# dates for periods
date0 <- as.Date("2020-03-15")
date1 <- as.Date("2020-04-15")
date2 <- as.Date("2020-05-15")
date3 <- as.Date("2020-06-15")
date4 <- as.Date("2020-07-15")
date5 <- as.Date("2020-08-15")
date6 <- as.Date("2020-09-15")
date7 <- max(dat$DATE)
# get_legend
legend <- get_legend(gx_map(date0, date1) +
theme(legend.position = "right"))
# saving
png(file = "EvolutionHospitalizations_red2.png", width = 12 * 360, height = 6 * 360, units = "px", pointsize = 7, res = 300)
grid.arrange(gx_map(date0, date1),
gx_map(date1, date2),
gx_map(date2, date3),
gx_map(date3, date4),
gx_map(date4, date5),
gx_map(date5, date6),
gx_map(date6, date7),
legend,
ncol = 4, nrow = 2,
widths = c(1, 1, 1, 1),
bottom = caption
)
dev.off()

geom_bar(aes(AGEGROUP, CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Women")
) +
geom_bar(aes(AGEGROUP, -CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Men")
) +
scale_y_continuous(
limits = c(-round_any(max(lab$CASES_divid), 100, f = ceiling), round_any(max(lab$CASES_divid), 100, f = ceiling)),
breaks = seq(-round_any(max(lab$CASES_divid), 100, f = ceiling), round_any(max(lab$CASES_divid), 100, f = ceiling), 200),
labels = abs(seq(-round_any(max(lab$CASES_divid), 100, f = ceiling), round_any(max(lab$CASES_divid), 100, f = ceiling), 200))
) +
coord_flip() +
theme_minimal() +
labs(
title = "Belgium",
subtitle = paste0(format(start, format = "%d/%m/%Y"), " - ", format(end, format = "%d/%m/%Y")),
x = "Age group",
y = "Number of cases per 100,000 inhabitants per week"
) +
theme(
legend.position = c(.95, .15),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.title = element_blank(),
legend.text = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
plot.margin = unit(c(5.5, 5.5, 30, 5.5), "points")
)
## plots for provinces
dat <- subset(dat_all, DATE >= start & DATE <= end & PROVINCE != "Belgium")
nweeks <- as.numeric(end - start) / 7
# cases per week
dat$CASES_divid <- dat$CASES_divid / nweeks
limit <- 650
pro_p1 <- ggplot(data = dat) +
facet_wrap(vars(PROVINCE),
scales = "fixed",
ncol = 9
) +
geom_bar(aes(AGEGROUP, CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Women")
) +
geom_bar(aes(AGEGROUP, -CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Men")
) +
scale_y_continuous(
limits = c(-limit, limit),
breaks = seq(-500, 500, 500),
labels = abs(seq(-500, 500, 500))
) +
coord_flip() +
theme_minimal() +
labs(
title = "Age and sex specific COVID-19 cases per 100,000 inhabitants per week in Belgium",
subtitle = paste0(format(start, format = "%d/%m/%Y"), " - ", format(end, format = "%d/%m/%Y")),
x = "Age group",
y = "Number of cases per 100,000 inhabitants per week"
) +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
plot.margin = unit(c(5.5, 5.5, 0, 5.5), "points")
)
# subset for period and province
start <- as.Date("2020-06-01")
end <- as.Date("2020-08-31")
dat <- subset(dat_all, DATE >= start & DATE <= end & PROVINCE == "Belgium")
nweeks <- as.numeric(end - start) / 7
# cases per week
dat$CASES_divid <- dat$CASES_divid / nweeks
# plot for Belgium
bel_p2 <- ggplot(data = dat) +
geom_bar(aes(AGEGROUP, CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Women")
) +
geom_bar(aes(AGEGROUP, -CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Men")
) +
scale_y_continuous(
limits = c(-round_any(max(lab$CASES_divid), 100, f = ceiling), round_any(max(lab$CASES_divid), 100, f = ceiling)),
breaks = seq(-round_any(max(lab$CASES_divid), 100, f = ceiling), round_any(max(lab$CASES_divid), 100, f = ceiling), 200),
labels = abs(seq(-round_any(max(lab$CASES_divid), 100, f = ceiling), round_any(max(lab$CASES_divid), 100, f = ceiling), 200))
) +
coord_flip() +
theme_minimal() +
labs(
title = "",
subtitle = paste0(format(start, format = "%d/%m/%Y"), " - ", format(end, format = "%d/%m/%Y")),
x = "",
y = "Number of cases per 100,000 inhabitants per week"
) +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
plot.margin = unit(c(5.5, 5.5, 30, 5.5), "points")
)
## plots for provinces
dat <- subset(dat_all, DATE >= start & DATE <= end & PROVINCE != "Belgium")
nweeks <- as.numeric(end - start) / 7
# cases per week
dat$CASES_divid <- dat$CASES_divid / nweeks
pro_p2 <- ggplot(data = dat) +
facet_wrap(vars(PROVINCE),
scales = "fixed",
ncol = 9
) +
geom_bar(aes(AGEGROUP, CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Women")
) +
geom_bar(aes(AGEGROUP, -CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Men")
) +
scale_y_continuous(
limits = c(-limit, limit),
breaks = seq(-500, 500, 500),
labels = abs(seq(-500, 500, 500))
) +
coord_flip() +
theme_minimal() +
labs(
subtitle = paste0(format(start, format = "%d/%m/%Y"), " - ", format(end, format = "%d/%m/%Y")),
x = "Age group",
y = "Number of cases per 100,000 inhabitants per week"
) +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
plot.margin = unit(c(5.5, 5.5, 0, 5.5), "points")
)
# subset for period and province
start <- as.Date("2020-09-01")
end <- as.Date(max(dat_all$DATE, na.rm = TRUE))
dat <- subset(dat_all, DATE >= start & DATE <= end & PROVINCE == "Belgium")
nweeks <- as.numeric(end - start) / 7
# cases per week
dat$CASES_divid <- dat$CASES_divid / nweeks
# plot for Belgium
bel_p3 <- ggplot(data = dat) +
geom_bar(aes(AGEGROUP, CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Women")
) +
geom_bar(aes(AGEGROUP, -CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Men")
) +
scale_y_continuous(
limits = c(-round_any(max(lab$CASES_divid), 100, f = ceiling), round_any(max(lab$CASES_divid), 100, f = ceiling)),
breaks = seq(-round_any(max(lab$CASES_divid), 100, f = ceiling), round_any(max(lab$CASES_divid), 100, f = ceiling), 200),
labels = abs(seq(-round_any(max(lab$CASES_divid), 100, f = ceiling), round_any(max(lab$CASES_divid), 100, f = ceiling), 200))
) +
coord_flip() +
theme_minimal() +
labs(
title = "",
subtitle = paste0(format(start, format = "%d/%m/%Y"), " - ", format(end, format = "%d/%m/%Y")),
x = "",
y = "Number of cases per 100,000 inhabitants per week"
) +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
plot.margin = unit(c(5.5, 5.5, 30, 5.5), "points")
)
## adjust caption at the end of the figure
caption <- grobTree(
textGrob("Niko Speybroeck (@NikoSpeybroeck), Antoine Soetewey (@statsandr) & Angel Rosas (@arosas_aguirre) \n Data: https://epistat.wiv-isp.be/covid/  ",
x = 1, hjust = 1, vjust = 0,
gp = gpar(col = "black", fontsize = 11, lineheight = 1.2)
),
cl = "ann"
)
## plots for provinces
dat <- subset(dat_all, DATE >= start & DATE <= end & PROVINCE != "Belgium")
nweeks <- as.numeric(end - start) / 7
# cases per week
dat$CASES_divid <- dat$CASES_divid / nweeks
pro_p3 <- ggplot(data = dat) +
facet_wrap(vars(PROVINCE),
scales = "fixed",
ncol = 9
) +
geom_bar(aes(AGEGROUP, CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Women")
) +
geom_bar(aes(AGEGROUP, -CASES_divid, group = SEX, fill = SEX),
stat = "identity",
subset(dat, SEX == "Men")
) +
scale_y_continuous(
limits = c(-limit, limit),
breaks = seq(-500, 500, 500),
labels = abs(seq(-500, 500, 500))
) +
coord_flip() +
theme_minimal() +
labs(
subtitle = paste0(format(start, format = "%d/%m/%Y"), " - ", format(end, format = "%d/%m/%Y")),
x = "Age group",
y = "Number of cases per 100,000 inhabitants per week"
) +
theme(
legend.position = "none",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
plot.margin = unit(c(5.5, 5.5, 0, 5.5), "points")
)
# save plot
png(file = "pyramid-plot_facets_incidence_week.png", width = 25.71428 * 360, height = 12 * 360, units = "px", pointsize = 7, res = 300)
ggarrange(ggarrange(pro_p1, pro_p2, pro_p3, ncol = 1),
grid.arrange(bel_p1, bel_p2, bel_p3, bottom = caption, ncol = 3),
ncol = 1, heights = c(2, 1)
)
dev.off()
library(GADMTools)
library(RColorBrewer)
library(tmap)
library(sf)
map <- gadm_sf_loadCountries(c("BEL"), level = 2, basefile = "./")$sf
map <- map %>%
mutate(PROVINCE = case_when(
NAME_2 %in% c("Brabant Wallon", "Vlaams Brabant", "Bruxelles") ~ "Brabant",
!NAME_2 %in% c("Brabant Wallon", "Vlaams Brabant", "Bruxelles") ~ NAME_2
)) %>%
group_by(PROVINCE) %>%
summarise(geometry = st_union(geometry))
mapBelgium<- tm_shape(map, unit = "km") +
tm_borders(lwd = 2, col ="gray")+
tm_layout(frame=F)
tmap_save(mapBelgium,units="cm", height = 12,  width = 25.4,  filename="map.png", dpi=300)
library(png)
img1 <- readPNG("pyramid-plot_facets_incidence_week.png")
img2 <- readPNG("map.png")
# Load downloaded images and add alpha channel
img1 = abind::abind(img1, img1[,,1]) # add an alpha channel
img2 = abind::abind(img2, img2[,,1]) # add an alpha channel
# Make semi-transparent
img1[,,4] <- 1
img2[,,4] <- 0.2
# Create output image
library(graphics)
library(raster)
png('pyramid-plot_facets_incidence_week.png', width = 25.71428 * 360, height = 12 * 360, units = "px", res=300)
par(mar = c(0,0,0,0), xaxs="i", yaxs="i")
plot.new()
rasterImage(img1, 0, 0, 1, 1)
rasterImage(img2, 0, 0, 1, 1)
dev.off()
install.packages(c("GADMTools", "RColorBrewer", "tmap", "sf"))
# clean environment
remove(list = ls())
# required packages
library(ggplot2)
library(ggrepel)
library(zoo)
library(lme4)
library(dplyr)
library(scales)
library(ggpubr)
library(grid)
library(gridExtra)
# import Sciensano hospitalisations data
dat <- read.csv("https://epistat.sciensano.be/Data/COVID19BE_HOSP.csv", fileEncoding = "UTF-8", stringsAsFactors = FALSE)
# aggregate new intakes by province and date
dat <- dat %>%
mutate(
DATE = as.Date(DATE),
PROVINCE2 = case_when(
PROVINCE %in% c("BrabantWallon", "VlaamsBrabant", "Brussels") ~ "Brabant",
!PROVINCE %in% c("BrabantWallon", "VlaamsBrabant", "Brussels") ~ PROVINCE
),
PROVINCE2 = case_when(
PROVINCE == "OostVlaanderen" ~ "Oost-Vlaanderen",
PROVINCE == "WestVlaanderen" ~ "West-Vlaanderen",
!PROVINCE %in% c("OostVlaanderen", "WestVlaanderen") ~ PROVINCE2
),
PROVINCE = PROVINCE2
)
dat <- aggregate(NEW_IN ~ DATE + PROVINCE, dat, sum)
# add new intakes for Belgium as a whole
belgium <- aggregate(NEW_IN ~ DATE, dat, sum) %>%
mutate(PROVINCE = "Belgium") %>%
select(DATE, PROVINCE, NEW_IN)
##
dat <- rbind(dat, belgium) %>%
mutate(
population = case_when(
PROVINCE == "Antwerpen" ~ 1857986,
PROVINCE == "Brabant" ~ 403599 + 1208542 + 1146175,
PROVINCE == "Hainaut" ~ 1344241,
PROVINCE == "Liège" ~ 1106992,
PROVINCE == "Limburg" ~ 874048,
PROVINCE == "Luxembourg" ~ 284638,
PROVINCE == "Namur" ~ 494325,
PROVINCE == "Oost-Vlaanderen" ~ 1515064,
PROVINCE == "West-Vlaanderen" ~ 1195796,
PROVINCE == "Belgium" ~ 11431406
),
NEW_IN_divid = NEW_IN / population * 100000
)
dat$PROVINCE <- relevel(as.factor(dat$PROVINCE), ref = "Belgium")
# Create plot in english
fig_trends <- ggplot(
subset(dat, DATE >= "2020-06-21"),
aes(x = DATE, y = NEW_IN_divid)
) +
annotate("rect",
ymin = -Inf, ymax = 0.5,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .05
) +
annotate("rect",
ymin = 0.5, ymax = 1,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .1
) +
annotate("rect",
ymin = 1, ymax = Inf,
xmin = as.Date(-Inf), xmax = as.Date(Inf),
alpha = .15
) +
geom_point(
size = 1L,
colour = "steelblue"
) +
labs(x = "", y = "Number of hospitalisations (per 100,00 inhabitants)") +
theme_minimal() +
facet_wrap(vars(PROVINCE),
scales = "free",
ncol = 5
) +
geom_smooth(
se = FALSE,
col = "grey",
method = "gam",
formula = y ~ s(x)
) +
geom_vline(
xintercept = as.Date("2020-07-01"), linetype = "dashed",
color = "lightgrey", size = 0.5
) +
geom_vline(
xintercept = as.Date("2020-08-01"), linetype = "dashed",
color = "lightgrey", size = 0.5
) +
geom_vline(
xintercept = as.Date("2020-09-01"), linetype = "dashed",
color = "lightgrey", size = 0.5
) +
labs(
title = "Evolution of hospital admissions in Belgium - COVID-19"
) +
scale_y_continuous(breaks = seq(from = 0, to = 1.5, by = 0.5), limits = c(0, 1.5)) +
scale_x_date(labels = date_format("%b")) +
theme(
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
plot.margin = unit(c(5.5, 5.5, 20, 5.5), "points")
)
## adjust caption at the end of the trend figure
caption <- grobTree(
textGrob("* Solid lines: curves fitted to observations",
x = 0, hjust = 0, vjust = 0,
gp = gpar(col = "darkgray", fontsize = 8, lineheight = 1.2)
),
textGrob("Niko Speybroeck (@NikoSpeybroeck), Antoine Soetewey (@statsandr) & Angel Rosas (@arosas_aguirre) \n Data: https://epistat.wiv-isp.be/covid/  ",
x = 1, hjust = 1, vjust = 0,
gp = gpar(col = "black", fontsize = 10, lineheight = 1.2)
),
cl = "ann"
)
##### MAPS
### Obtaining Belgium shapefile at province level
library(GADMTools)
library(RColorBrewer)
library(tmap)
library(sf)
maxi <- max(dat$DATE)
mini <- max(dat$DATE) - 13
divi <- length(mini:maxi)
# agregated data to join with the map
# calculating the daily rate in two periods :
## 1. last week of March- first week of April (14 days)
## 2. Last 14 days reported by Scienciano
dat$PROVINCE <- as.character(dat$PROVINCE)
dat_ag <- filter(dat, PROVINCE != "Belgium") %>%
group_by(PROVINCE) %>%
summarize(
"per1" = sum(NEW_IN_divid[DATE >= as.Date("2020-03-25") & DATE <= as.Date("2020-04-07")], na.rm = T) / 14,
"per2" = sum(NEW_IN_divid[DATE >= mini & DATE <= maxi], na.rm = T) / divi
)
## sf structure
map <- gadm_sf_loadCountries(c("BEL"), level = 2, basefile = "./")$sf
map <- map %>%
mutate(PROVINCE = case_when(
NAME_2 %in% c("Brabant Wallon", "Vlaams Brabant", "Bruxelles") ~ "Brabant",
!NAME_2 %in% c("Brabant Wallon", "Vlaams Brabant", "Bruxelles") ~ NAME_2
)) %>%
group_by(PROVINCE) %>%
summarise(geometry = st_union(geometry)) %>%
left_join(dat_ag, by = "PROVINCE") %>%
mutate(
class1 = cut(per1,
breaks = c(0, 0.001, 0.5, 1.0, 1.5, 3, 5, 7),
include.lowest = TRUE,
labels = c("0.0", "] 0.0, 0.5 ]", "] 0.5, 1.0 ]", "] 1.0, 1.5 ]", "] 1.5, 3.0 ]", "] 3.0, 5.0]", " > 5.0")
),
class2 = cut(per2,
breaks = c(0, 0.001, 0.5, 1.0, 1.5, 3, 5, 7),
include.lowest = TRUE,
labels = c("0.0", "] 0.0, 0.5 ]", "] 0.5, 1.0 ]", "] 1.0, 1.5 ]", "] 1.5, 3.0 ]", "] 3.0, 5.0]", " > 5.0")
)
)
###### MAPS WITH GGPLOT
points <- st_centroid(map)
points <- cbind(map, st_coordinates(st_centroid(map$geometry)))
points <- mutate(points,
num_1 = paste("(", round(per1, 2), ")"),
num_2 = paste("(", round(per2, 2), ")")
)
period1 <- paste0("Period: 25/03 - 07/04", "   ")
period2 <- paste0(
"Period: ", format(mini, format = "%d/%m"), " - ",
format(maxi, format = "%d/%m"), "   "
)
library(RColorBrewer)
reds <- brewer.pal(7, "Reds")
blues <- brewer.pal(7, "Blues")
map1 <- ggplot(map) +
geom_sf(aes(fill = class1)) +
scale_fill_manual(values = blues, drop = FALSE) +
geom_text(
data = points, aes(x = X, y = Y + 0.06, label = PROVINCE), col = "black", size = 2.4,  nudge_x = -0.07,
check_overlap = TRUE
) +
geom_text(
data = points, aes(x = X, y = Y, label = num_1), col = "black", size = 3,  nudge_x = -0.07,
check_overlap = TRUE
) +
labs(fill = bquote(atop(NA, atop("Daily hospitalizations (x100,000 inh.)", bold(.(period1)))))) +
theme_void() +
theme(
# Change legend
legend.position = c(0.2, 0.2),
legend.key.size = unit(0.9, "line"),
legend.title = element_text(size = 12, color = "black"),
legend.text = element_text(color = "black"),
plot.margin = unit(c(+0.2, 0, +0.5, 3), "cm")
)
map2 <- ggplot(map) +
geom_sf(aes(fill = class2)) +
scale_fill_manual(values = blues, drop = FALSE) +
geom_text(
data = points, aes(x = X, y = Y + 0.06, label = PROVINCE), col = "black", size = 2.4,  nudge_x = -0.07,
check_overlap = TRUE
) +
geom_text(
data = points, aes(x = X, y = Y, label = num_2), col = "black", size = 3, nudge_x = -0.07,
check_overlap = TRUE
) +
labs(fill = bquote(atop(NA, atop("Daily hospitalizations (x100,000 inh.)", bold(.(period2)))))) +
theme_void() +
theme(
# Change legend
legend.position = c(0.2, 0.22),
legend.key.size = unit(0.9, "line"),
legend.title = element_text(size = 12, color = "black"),
legend.text = element_text(color = "black"),
plot.margin = unit(c(+0.2, 0, +0.5, 3), "cm")
)
# save plot
png(file = "Belgian_Hospitalisations_0910.png", width = 15 * 360, height = 7 * 360, units = "px", pointsize = 7, res = 300)
ggarrange(ggarrange(map1, map2, ncol = 1),
grid.arrange(fig_trends, bottom = caption),
ncol = 2, widths = c(1, 1.5)
)
dev.off()
